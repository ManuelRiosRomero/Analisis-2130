# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1axerP2TlkBcIFuPJ-q5UQ2Sf0VaVRI4T
"""

# -- coding: utf-8 --
"""
Created on Tue Oct 12 23:52:33 2021

"""
#import sympy as sp
import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
import pandas as pd
import random
from sklearn.metrics import jaccard_score
#PUNTO1
df = pd.ExcelFile('Abril_2017_(1 em 1 hora) .xls').parse('Aiuaba')  #you could add index_col=0 if there's an index

y=df[['Temp. Interna (ºC)']]
y=np.asarray(y).squeeze()
x = np.arange(1.0, float(len(y))+1.0, 1.0)

#Eliminar 30% del punto 1
yelim = []
xelim = []
ynuevo = y
xnuevo = x
bool = True
print(min(xnuevo), max(xnuevo))
for i in range(216):    
  aux=random.randrange(1,len(ynuevo)-1)
  yelim.append(y[aux])
  xelim.append(x[aux])
  ynuevo=np.delete(ynuevo, aux, 0)
  xnuevo = np.delete(xnuevo, aux, 0)

'''   
yelim=np.asarray(yelim).squeeze()
xelim=np.asarray(xelim).squeeze()
xnuevo=np.asarray(xnuevo).squeeze()
ynuevo=np.asarray(ynuevo).squeeze()
'''

y=np.asarray(y).squeeze()

yt=df[['Temp. Interna (ºC)']]
yt=np.asarray(yt).squeeze()
'''
print(min(xnuevo), max(xnuevo))
print(len(yelim))
print(len(ynuevo))
print(len(y))
print(len(x))
print(len(xelim))
'''

#PUNTO2
df = pd.ExcelFile('Abril_2017_(1 em 1 hora) .xls').parse('Crato')  #you could add index_col=0 if there's an index
prediccion=df[['Temp. Interna (ºC)']]
prediccion=np.asarray(y).squeeze()

#ESTACION 1
df = pd.ExcelFile('Abril_2017_(1 em 1 hora) .xls').parse('Jatí')  #you could add index_col=0 if there's an index

cercana1=df[['Temp. Interna (ºC)']]
dia1 = df[['Dia Juliano']]
hora1 = df[['Hora']]
cercana1=np.asarray(cercana1).squeeze()
dia1=np.asarray(dia1).squeeze()
hora1 = np.asarray(hora1).squeeze()

tiempo1 = []
for i in range(len(hora1)):
  tiempo1.append((hora1[i]+(dia1[i]-91)*2400)/100)
#print(tiempo1)
#tiempo1=np.asarray(tiempo1).squeeze

#ESTACION 2
df = pd.ExcelFile('Abril_2017_(1 em 1 hora) .xls').parse('Araripe')  #you could add index_col=0 if there's an index

cercana2=df[['Temp. Interna (ºC)']]
dia2 = df[['Dia Juliano']]
hora2 = df[['Hora']]
cercana2=np.asarray(cercana2).squeeze()
dia2=np.asarray(dia2).squeeze()
hora2 = np.asarray(hora2).squeeze()

tiempo2 = []
for i in range(len(hora2)):
  tiempo2.append((hora2[i]+(dia2[i]-91)*2400)/100)
#tiempo2=np.asarray(tiempo2).squeeze


#ESTACION 3
df = pd.ExcelFile('Abril_2017_(1 em 1 hora) .xls').parse('Aiuaba')  #you could add index_col=0 if there's an index

cercana3=df[['Temp. Interna (ºC)']]
dia3 = df[['Dia Juliano']]
hora3 = df[['Hora']]
cercana3=np.asarray(cercana3).squeeze()
dia3=np.asarray(dia3).squeeze()
hora3 = np.asarray(hora3).squeeze()

tiempo3 = []
for i in range(len(hora3)):
  tiempo3.append((hora3[i]+(dia3[i]-91)*2400)/100)
#tiempo3=np.asarray(tiempo3).squeeze


#SOLUCION 1
f = interpolate.interp1d(xnuevo,ynuevo,kind='cubic')

xnew = np.arange(min(xnuevo), max(xnuevo), 0.5)
ynew = f(xnew)   # use interpolation function returned by `interp1d`
plt.plot(xnew,ynew)
plt.plot(x, y)
#plt.plot(x, y, 'o', xnew, ynew, '-')
#plt.plot(x,yt)
plt.title('Problema 1: Estacion de Aiuaba')
plt.show()

#SOLUCION 2
f1 = interpolate.interp1d(tiempo1,cercana1,kind='cubic')
f2 = interpolate.interp1d(tiempo2,cercana2,kind='cubic')
f3 = interpolate.interp1d(tiempo3,cercana3,kind='cubic')
x1new = np.arange(min(tiempo2), max(tiempo1),0.1)
x2new = np.arange(min(tiempo2), max(tiempo2),0.1)
x3new = np.arange(min(tiempo2), max(tiempo3),0.1)
C1new = f1(x1new)
C2new = f2(x2new)
C3new = f3(x3new)
plt.close()
plt.plot(x1new, C1new)
plt.title('Problema 2: Estacion JATI')
plt.show()
plt.close()
plt.plot(x2new, C2new)
plt.title('Problema 2: Estacion ARARIPE')
plt.show()
plt.close()
plt.plot(x3new, C3new)
plt.title('Problema 2: Estacion AIUABA')
plt.show()

#PROMEDIO
#print(min(tiempo1),min(tiempo2), min(tiempo3))
#print(max(tiempo1),max(tiempo2), max(tiempo3))

Res2 = np.add(C1new,C2new)
Res2 = np.add(Res2,C3new)
Res2 = Res2/3

#Res2 = C3new

'''
Res=[]
for i in range(int(min(tiempo2)),int(max(tiempo3))):
  Res.append((f1(i)+f2(i)+f3(i))/3)
'''

xfinal=np.arange(int(min(tiempo2)),int(max(tiempo3)),0.1)
plt.plot(xfinal,Res2)
plt.title('Problema 2: Promedio de las 3 Estaciones')
plt.show()

#COMPARACION
g = interpolate.interp1d(x,prediccion,kind='cubic')

xnnew = np.arange(min(xfinal), max(xfinal), 0.1)
znew = g(xnnew)   # use interpolation function returned by `interp1d`
#plt.plot(x, y)
#plt.plot(xnew,ynew)
plt.plot(xnnew, znew)
plt.plot(xfinal, Res2)

plt.title('Problema 2: Valor real estacion CRATO')
plt.show()

def mape(row):
    return abs(row.Forecast - row.Actual) / ((abs(row.Actual) + abs(row.Forecast))/2)

# create the pandas dataframe if you dont have one already
df=pd.DataFrame.from_dict({'Actual':g(xnnew), 'Forecast':Res2})

# apply the above function on each row 
smape = df.apply(mape, axis=1).sum() * (1/len(df))

print("Errores del Punto 2")
print("el error absoluto porcentual es:", smape)
Error=[]
ErrorR=[]
for i in range(int(min(xnnew)),int(max(xnnew))):
  Error.append((Res2[i]-znew[i])/2)
  ErrorR.append(1-(Res2[i]/znew[i]))
Error = np.absolute(Error)
ErrorR = np.absolute(ErrorR)

print("el error maximo absoluto es:", max(Error))
print("el error minimo absoluto es: ", min(Error))
print("el error maximo relativo es:", max(ErrorR))
print("el error minimo relativo es: ", min(ErrorR))

#Indice de Jaccard

def jaccard(group1, group2):
	inter = len(set(group1).intersection(set(group2)))
	uni = len (set(group1).union(set(group2)))
	return inter/uni

Indice_Jac = jaccard(znew, Res2)

print("El indice de Jaccard es: ", Indice_Jac)

#Error 1
print("Errores del punto 1")
auxf=f(xelim)
df=pd.DataFrame.from_dict({'Actual':yelim, 'Forecast':auxf})

# apply the above function on each row 
smape = df.apply(mape, axis=1).sum() * (1/len(df))
print("el error absoluto porcentual es:", smape)

Error1=[]
ErrorR1=[]
for i in range(len(yelim)):
  Error1.append((auxf[i]-yelim[i])/2)
  ErrorR1.append(1-(auxf[i]/yelim[i]))
Error1 = np.absolute(Error1)
ErrorR1 = np.absolute(ErrorR1)

print("el error maximo absoluto es:", max(Error1))
print("el error minimo absoluto es: ", min(Error1))
print("el error maximo relativo es:", max(ErrorR1))
print("el error minimo relativo es: ", min(ErrorR1))
Indice_Jac = jaccard(yelim, auxf)

print("El indice de Jaccard es: ", Indice_Jac)